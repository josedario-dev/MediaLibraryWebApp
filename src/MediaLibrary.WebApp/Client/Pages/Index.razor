@page "/explore"
@using MediaLibrary.WebApp.Core.Enums
@using MediaLibrary.WebApp.Shared
@using Newtonsoft.Json
@inject HttpClient Http
@inject IAppState appState
@inject IMudMessagingService _mudMessagingService
@inject NavigationManager _navigationManager

<style>
    body {
        background-color: #000000;
    }
</style>

<PageTitle>Explorar</PageTitle>


@if (string.IsNullOrEmpty(appState.NickName))
{
    <MudText Typo="Typo.h3" Style="color:#e0e0e0;">¡HOLA!, Invitado</MudText>
}
else
{
    <MudText Typo="Typo.h3" Style="color:#e0e0e0;">¡HOLA! @appState.NickName</MudText>
}
<br />
<MudText Typo="Typo.h4" GutterBottom="true" Style="color:#e0e0e0;">Echa un vistazo al arte del mundo de diferentes creadores!</MudText>
<br/>
<MudPaper Class="d-flex align-start justify-start mud-width-full">
    ...
    <MudTextField Placeholder="Buscar..." @bind-Value="searchText" Class="ma-5"
                  OnKeyPress="@HandleKeyPress" />
    <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="align-self-center ma-5"
               OnClick="@(() => LoadData(searchText))">Buscar</MudButton>
</MudPaper>


<br />
<br />
@if (IsLoading)
{
    <MudProgressCircular Style="color: #FFFFFF;" Indeterminate="true" />
}
else
{
    <MudGrid>
        @foreach (MediaDto media in medias)
        {
            <MudItem xs="12" sm="12" md="6" lg="6">
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">@media.Contributor.NickName</MudText>
                            </CardHeaderContent>
                            <CardHeaderActions>
                                <MudAvatar>
                                    <MudImage Src="@media.Contributor.PhotoPath"></MudImage>
                                </MudAvatar>
                            </CardHeaderActions>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudText Typo="Typo.h4" Style="font-weight:bold;">@media.Title</MudText>
                            <br />
                            <br />
                            @switch ((MediaType)media.MediaType)
                            {
                                case MediaType.Picture:
                                    <MudImage ObjectFit="ObjectFit.Cover" Height="300" Src="@media.FilePath" Alt="@media.Title" Elevation="25" Class="rounded-lg" />
                                    break;
                                case MediaType.Audio:
                                    <MudIcon Icon="@Icons.Material.Filled.AudioFile" Style="font-size: 8rem;" />
                                    break;
                                case MediaType.File:
                                    <MudIcon Icon="@Icons.Material.Filled.InsertDriveFile" Style="font-size: 8rem;" />
                                    break;
                                case MediaType.Video:
                                    <MudIcon Icon="@Icons.Material.Filled.Videocam" Style="font-size: 8rem;" />
                                    break;
                            }
                        <MudText Typo="Typo.h5">Descripción</MudText>
                        <MudText>@media.Description</MudText>
                        </MudCardContent>

                        <MudCardActions>

                            <MudChip Icon="@Icons.Material.Filled.CalendarMonth" Color="Color.Info">@media.PublicationDate?.ToString("dd MMM, yyyy")</MudChip>
                            <MudSpacer />
                            <MudButton Variant="Variant.Text" Style="background-color:#000000;color:#FFFFFF;" OnClick="@(() => DownloadArt(media.FilePath))">Descargar</MudButton>

                        </MudCardActions>
                    </MudCard>
                </MudItem>
        }
    </MudGrid>
}

@code
{
    private bool IsLoading;
    private List<MediaDto> medias = new List<MediaDto>();
    private string searchText = string.Empty;

    private void HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Key == "Enter")
        {
            LoadData(searchText);
        }
    }

    private async void LoadData(string search = "")
    {
        // Filtrar los resultados según el texto de búsqueda
        string json = JsonConvert.SerializeObject(medias);
        List<MediaDto> clonedList = JsonConvert.DeserializeObject<List<MediaDto>>(json);
        if (!String.IsNullOrEmpty(search))
            search = search.ToLower();
        if (!string.IsNullOrWhiteSpace(search))
        {
            var medias0 = clonedList.Where(c => c.Description.Contains(search, StringComparison.OrdinalIgnoreCase)).ToList();
            if(medias0 == null || medias0.Count()==0)
            {
                medias0 = clonedList.Where(c => c.Title.Contains(search, StringComparison.OrdinalIgnoreCase)).ToList();
                if (medias0 != null && medias0.Count > 0)
                    medias = medias0;
            }
            else
            {
                if (medias0 == null)
                    LoadData();
                else
                    medias = medias0;
            }

        }
        else
            LoadData();

        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        LoadData();
    }

    private void DownloadArt(string filePath)
    {
        try
        {
            _mudMessagingService.ShowLoader("Descargando archivo ...");
            _navigationManager.NavigateTo(filePath, forceLoad: true);
        }
        catch (Exception)
        {
            _mudMessagingService.HideLoader();
            _mudMessagingService.ShowAlertError("Error","No se pudo descargar el archivo...","Aceptar");
        }
        finally
        {
            _mudMessagingService.HideLoader();
        }
    }

    private async void LoadData()
    {
        try
        {
            IsLoading = true;
            var response = await Http.GetFromJsonAsync<List<MediaDto>>("api/media");
            if (response != null)
            {
                medias = response;
            }
        }
        catch (Exception ex)
        {
            // Manejar las excepciones
            _mudMessagingService.ShowAlertError("Cargando registros", $"Error al cargar los registros {ex.InnerException} {ex.InnerException.Message}", "Aceptar");
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }
}