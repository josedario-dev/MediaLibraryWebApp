@page "/changePassword"
@using CurrieTechnologies.Razor.SweetAlert2
@using MediaLibrary.WebApp.Client.Repositories.Contracts
@using MudBlazor
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager
@inject IMudMessagingService _mudMessagingService

@if (loading)
{
    <div class="spinner" />
}
<MudGrid>
    <MudItem xs="12" md="6">
        <EditForm Model="changePasswordDTO" OnValidSubmit="ChangePasswordAsync">
            <DataAnnotationsValidator />
            <MudCard>
                <MudCardHeader>
                    <MudGrid>
                        <MudItem xs="12">
                            <MudText Typo="Typo.h6">
                                <MudIcon Icon="@Icons.Material.Filled.VpnKey" /> Cambiar Contraseña
                            </MudText>
                        </MudItem>
                        <MudItem>
                            <MudButton Variant="Variant.Filled" Color="Color.Success" Href="/editUser" Class="float-end">
                                <MudIcon Icon="@Icons.Material.Filled.ArrowBack" /> Regresar
                            </MudButton>
                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="float-end mx-2">
                                <MudIcon Icon="@Icons.Material.Filled.Check" /> Guardar Cambios
                            </MudButton>
                        </MudItem>
                    </MudGrid>
                </MudCardHeader>
                <MudCardContent>
                    <MudTextField Label="Contraseña actual:" InputType="InputType.Password" FullWidth @bind-Value="changePasswordDTO.CurrentPassword" />
                     <ValidationMessage For="@(() => changePasswordDTO.CurrentPassword)" />
                     <MudTextField Label="Nueva contraseña:" InputType="InputType.Password" Class="form-control" FullWidth @bind-Value="changePasswordDTO.NewPassword" />
                     <ValidationMessage For="@(() => changePasswordDTO.NewPassword)" />
                     <MudTextField Label="Confirmación de nueva contraseña:" InputType="InputType.Password" Class="form-control" FullWidth @bind-Value="changePasswordDTO.Confirm" />
                     <ValidationMessage For="@(() => changePasswordDTO.Confirm)"/>
                 </MudCardContent>
             </MudCard>
         </EditForm>
     </MudItem>
 </MudGrid>


 @code {
    private ChangePasswordDTO changePasswordDTO = new();
    private bool loading;

    private bool ValidatePasswords()
    {
        return changePasswordDTO.NewPassword == changePasswordDTO.Confirm;
    }
    private async Task ChangePasswordAsync()
    {
        loading = true;
        var responseHttp = await repository.Post("/api/accounts/changePassword", changePasswordDTO);
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            loading = false;
            return;
        }

        loading = false;
        navigationManager.NavigateTo("/editUser");
        var toast = sweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.TopEnd,
                ShowConfirmButton = true,
                Timer = 5000
            });
        await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Contraseña cambiada con éxito.");
    }
}
